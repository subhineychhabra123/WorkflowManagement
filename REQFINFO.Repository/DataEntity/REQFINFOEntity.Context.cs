//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REQFINFO.Repository.DataEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Core.Objects.DataClasses;
    using System.Linq;
    
    public partial class GIGEntities : DbContext
    {
        public GIGEntities()
            : base("name=GIGEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contractor> Contractors { get; set; }
        public virtual DbSet<CustomLookup> CustomLookups { get; set; }
        public virtual DbSet<Function> Functions { get; set; }
        public virtual DbSet<FunctionXTab> FunctionXTabs { get; set; }
        public virtual DbSet<GIG> GIGs { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<LevelXFunction> LevelXFunctions { get; set; }
        public virtual DbSet<LifeCycle> LifeCycles { get; set; }
        public virtual DbSet<LookupType> LookupTypes { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Tab> Tabs { get; set; }
        public virtual DbSet<UDFDefinition> UDFDefinitions { get; set; }
        public virtual DbSet<UDFInstance> UDFInstances { get; set; }
        public virtual DbSet<UDFTemplate> UDFTemplates { get; set; }
        public virtual DbSet<UDFType> UDFTypes { get; set; }
        public virtual DbSet<UDFValidation> UDFValidations { get; set; }
        public virtual DbSet<UDFValidationDefinition> UDFValidationDefinitions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserXProjectXWorkFlowUserGroup> UserXProjectXWorkFlowUserGroups { get; set; }
        public virtual DbSet<Workflow> Workflows { get; set; }
        public virtual DbSet<WorkFlowUserGroup> WorkFlowUserGroups { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<RFI_GetActionsForLoggedInUser_Result> RFI_GetActionsForLoggedInUser(Nullable<int> iDUser, Nullable<int> iDProject, Nullable<System.Guid> iDGIG, Nullable<int> iDFunctionTrigger)
        {
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var iDGIGParameter = iDGIG.HasValue ?
                new ObjectParameter("IDGIG", iDGIG) :
                new ObjectParameter("IDGIG", typeof(System.Guid));
    
            var iDFunctionTriggerParameter = iDFunctionTrigger.HasValue ?
                new ObjectParameter("IDFunctionTrigger", iDFunctionTrigger) :
                new ObjectParameter("IDFunctionTrigger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetActionsForLoggedInUser_Result>("RFI_GetActionsForLoggedInUser", iDUserParameter, iDProjectParameter, iDGIGParameter, iDFunctionTriggerParameter);
        }
    
        public virtual int RFI_GetGIGCommunicationCounts(Nullable<int> iDProject, Nullable<int> iDTab, Nullable<int> tabStatus, ObjectParameter statusCount)
        {
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var iDTabParameter = iDTab.HasValue ?
                new ObjectParameter("IDTab", iDTab) :
                new ObjectParameter("IDTab", typeof(int));
    
            var tabStatusParameter = tabStatus.HasValue ?
                new ObjectParameter("TabStatus", tabStatus) :
                new ObjectParameter("TabStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RFI_GetGIGCommunicationCounts", iDProjectParameter, iDTabParameter, tabStatusParameter, statusCount);
        }
    
        public virtual ObjectResult<RFI_GetGIGCommunicationLog_Result> RFI_GetGIGCommunicationLog(Nullable<int> iDUPW, Nullable<int> iDStatus, string search, string searchBy, Nullable<bool> searchOrder, string searchbyField)
        {
            var iDUPWParameter = iDUPW.HasValue ?
                new ObjectParameter("IDUPW", iDUPW) :
                new ObjectParameter("IDUPW", typeof(int));
    
            var iDStatusParameter = iDStatus.HasValue ?
                new ObjectParameter("IDStatus", iDStatus) :
                new ObjectParameter("IDStatus", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var searchByParameter = searchBy != null ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(string));
    
            var searchOrderParameter = searchOrder.HasValue ?
                new ObjectParameter("SearchOrder", searchOrder) :
                new ObjectParameter("SearchOrder", typeof(bool));
    
            var searchbyFieldParameter = searchbyField != null ?
                new ObjectParameter("SearchbyField", searchbyField) :
                new ObjectParameter("SearchbyField", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetGIGCommunicationLog_Result>("RFI_GetGIGCommunicationLog", iDUPWParameter, iDStatusParameter, searchParameter, searchByParameter, searchOrderParameter, searchbyFieldParameter);
        }
    
        public virtual ObjectResult<RFI_GetProjectsList_Result> RFI_GetProjectsList(Nullable<int> userID, Nullable<int> companyId, Nullable<int> workFlowId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetProjectsList_Result>("RFI_GetProjectsList", userIDParameter, companyIdParameter, workFlowIdParameter);
        }
    
        public virtual ObjectResult<RFI_GetUDFFieldsData_Result> RFI_GetUDFFieldsData(Nullable<int> iDUPW, Nullable<int> iDProject, Nullable<System.Guid> iDGig)
        {
            var iDUPWParameter = iDUPW.HasValue ?
                new ObjectParameter("IDUPW", iDUPW) :
                new ObjectParameter("IDUPW", typeof(int));
    
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var iDGigParameter = iDGig.HasValue ?
                new ObjectParameter("IDGig", iDGig) :
                new ObjectParameter("IDGig", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetUDFFieldsData_Result>("RFI_GetUDFFieldsData", iDUPWParameter, iDProjectParameter, iDGigParameter);
        }
    
        public virtual ObjectResult<RFI_GetUDFFieldsValidations_Result> RFI_GetUDFFieldsValidations(Nullable<int> iDUDFDefinition)
        {
            var iDUDFDefinitionParameter = iDUDFDefinition.HasValue ?
                new ObjectParameter("IDUDFDefinition", iDUDFDefinition) :
                new ObjectParameter("IDUDFDefinition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetUDFFieldsValidations_Result>("RFI_GetUDFFieldsValidations", iDUDFDefinitionParameter);
        }
    
        public virtual ObjectResult<RFI_GetUserWorkflow_Result> RFI_GetUserWorkflow(Nullable<int> userID, Nullable<int> companyId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetUserWorkflow_Result>("RFI_GetUserWorkflow", userIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<RFI_GetLevelXFunctionData_Result> RFI_GetLevelXFunctionData(Nullable<int> iDWorkFlowUserGroup)
        {
            var iDWorkFlowUserGroupParameter = iDWorkFlowUserGroup.HasValue ?
                new ObjectParameter("IDWorkFlowUserGroup", iDWorkFlowUserGroup) :
                new ObjectParameter("IDWorkFlowUserGroup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetLevelXFunctionData_Result>("RFI_GetLevelXFunctionData", iDWorkFlowUserGroupParameter);
        }
    
        public virtual ObjectResult<RFI_GetActionsOnFirstLevel_Result> RFI_GetActionsOnFirstLevel(Nullable<int> iDUser, Nullable<int> iDProject, Nullable<int> iDWorkFlowUserGroup, Nullable<bool> isCreatedNotClosed)
        {
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var iDWorkFlowUserGroupParameter = iDWorkFlowUserGroup.HasValue ?
                new ObjectParameter("IDWorkFlowUserGroup", iDWorkFlowUserGroup) :
                new ObjectParameter("IDWorkFlowUserGroup", typeof(int));
    
            var isCreatedNotClosedParameter = isCreatedNotClosed.HasValue ?
                new ObjectParameter("IsCreatedNotClosed", isCreatedNotClosed) :
                new ObjectParameter("IsCreatedNotClosed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetActionsOnFirstLevel_Result>("RFI_GetActionsOnFirstLevel", iDUserParameter, iDProjectParameter, iDWorkFlowUserGroupParameter, isCreatedNotClosedParameter);
        }
    
        public virtual ObjectResult<RFI_GetGIGLogData_Result> RFI_GetGIGLogData(Nullable<System.Guid> iDGIG)
        {
            var iDGIGParameter = iDGIG.HasValue ?
                new ObjectParameter("IDGIG", iDGIG) :
                new ObjectParameter("IDGIG", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetGIGLogData_Result>("RFI_GetGIGLogData", iDGIGParameter);
        }
    
        public virtual ObjectResult<RFI_GetCreateOption_Result> RFI_GetCreateOption(Nullable<int> idWorkFlowUSerGroup)
        {
            var idWorkFlowUSerGroupParameter = idWorkFlowUSerGroup.HasValue ?
                new ObjectParameter("IdWorkFlowUSerGroup", idWorkFlowUSerGroup) :
                new ObjectParameter("IdWorkFlowUSerGroup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetCreateOption_Result>("RFI_GetCreateOption", idWorkFlowUSerGroupParameter);
        }
    
        public virtual ObjectResult<GetLevelDetailNextOrPrevious_Result> GetLevelDetailNextOrPrevious(Nullable<int> iDProject, Nullable<int> currentSequence, Nullable<bool> isNextNotPreviousLevel)
        {
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var currentSequenceParameter = currentSequence.HasValue ?
                new ObjectParameter("CurrentSequence", currentSequence) :
                new ObjectParameter("CurrentSequence", typeof(int));
    
            var isNextNotPreviousLevelParameter = isNextNotPreviousLevel.HasValue ?
                new ObjectParameter("IsNextNotPreviousLevel", isNextNotPreviousLevel) :
                new ObjectParameter("IsNextNotPreviousLevel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLevelDetailNextOrPrevious_Result>("GetLevelDetailNextOrPrevious", iDProjectParameter, currentSequenceParameter, isNextNotPreviousLevelParameter);
        }
    
        public virtual ObjectResult<RFI_GetSendto_Result> RFI_GetSendto(Nullable<int> sequence, Nullable<int> iDProject, Nullable<int> iDContractor)
        {
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("sequence", sequence) :
                new ObjectParameter("sequence", typeof(int));
    
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var iDContractorParameter = iDContractor.HasValue ?
                new ObjectParameter("IDContractor", iDContractor) :
                new ObjectParameter("IDContractor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFI_GetSendto_Result>("RFI_GetSendto", sequenceParameter, iDProjectParameter, iDContractorParameter);
        }
    
        public virtual int RFI_GetUSercurrentLevelsCount(Nullable<int> iDProject, Nullable<int> iDUser, Nullable<int> currentSequence, ObjectParameter totalRecords)
        {
            var iDProjectParameter = iDProject.HasValue ?
                new ObjectParameter("IDProject", iDProject) :
                new ObjectParameter("IDProject", typeof(int));
    
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            var currentSequenceParameter = currentSequence.HasValue ?
                new ObjectParameter("CurrentSequence", currentSequence) :
                new ObjectParameter("CurrentSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RFI_GetUSercurrentLevelsCount", iDProjectParameter, iDUserParameter, currentSequenceParameter, totalRecords);
        }
    }
}
